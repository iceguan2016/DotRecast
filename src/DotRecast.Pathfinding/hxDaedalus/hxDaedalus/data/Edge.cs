// Generated by Haxe 4.3.6

#pragma warning disable 109, 114, 219, 429, 168, 162
using Pathfinding.Util;

namespace hxDaedalus.data {
	public class Edge : global::haxe.lang.HxObject {
		
		static Edge() {
			global::hxDaedalus.data.Edge.INC = 0;
		}
		
		
		public Edge(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Edge() {
			global::hxDaedalus.data.Edge.__hx_ctor_hxDaedalus_data_Edge(this);
		}
		
		
		protected static void __hx_ctor_hxDaedalus_data_Edge(global::hxDaedalus.data.Edge __hx_this) {
			unchecked {
				__hx_this.colorDebug = -1;
				{
					__hx_this._id = global::hxDaedalus.data.Edge.INC;
					global::hxDaedalus.data.Edge.INC++;
					__hx_this.fromConstraintSegments = new global::HxArray<object>();
				}
				
			}
		}
		
		
		public static int INC;
		
		
		
		
		
		
		
		
		
		
		
		
		
		public global::HxArray<object> fromConstraintSegments;
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		public int _id;
		
		public bool _isReal;
		
		public bool _isConstrained;
		
		public global::hxDaedalus.data.Vertex _originVertex;
		
		public global::hxDaedalus.data.Edge _oppositeEdge;
		
		public global::hxDaedalus.data.Edge _nextLeftEdge;
		
		public global::hxDaedalus.data.Face _leftFace;
		
		public int colorDebug;
		
		public virtual int get_id() {
			return this._id;
		}
		
		
		public virtual bool get_isReal() {
			return this._isReal;
		}
		
		
		public virtual bool get_isConstrained() {
			return this._isConstrained;
		}
		
		
		public virtual void setDatas(global::hxDaedalus.data.Vertex originVertex, global::hxDaedalus.data.Edge oppositeEdge, global::hxDaedalus.data.Edge nextLeftEdge, global::hxDaedalus.data.Face leftFace, global::haxe.lang.Null<bool> isReal, global::haxe.lang.Null<bool> isConstrained) {
			bool isConstrained1 = ( ( ! (isConstrained.hasValue) ) ? (false) : ((isConstrained).@value) );
			bool isReal1 = ( ( ! (isReal.hasValue) ) ? (true) : ((isReal).@value) );
			this._isConstrained = isConstrained1;
			this._isReal = isReal1;
			this._originVertex = originVertex;
			this._oppositeEdge = oppositeEdge;
			this._nextLeftEdge = nextLeftEdge;
			this._leftFace = leftFace;

            if (_id == 26)
            {
                int stio = 0;
            }

            var nextLeftEdgeId = _nextLeftEdge != null ? _nextLeftEdge._id : -1;
            var leftFaceId = _leftFace != null? _leftFace._id : -1;
            Debug.LogToFile($"Edge.setDatas id:{_id}, _isConstrained:{_isConstrained}, _isReal:{_isReal}, " +
                $"_originVertex:{_originVertex.toString()}, _oppositeEdge:{_oppositeEdge._id}" +
                $"_nextLeftEdge:{nextLeftEdgeId}, _leftFace:{leftFaceId}");
        }
		
		
		public virtual void addFromConstraintSegment(global::hxDaedalus.data.ConstraintSegment segment) {
			unchecked {
				if (( this.fromConstraintSegments.indexOf(segment, default(global::haxe.lang.Null<int>)) == -1 )) {
					this.fromConstraintSegments.push(segment);
				}
				
			}
		}
		
		
		public virtual void removeFromConstraintSegment(global::hxDaedalus.data.ConstraintSegment segment) {
			unchecked {
				int index = this.fromConstraintSegments.indexOf(segment, default(global::haxe.lang.Null<int>));
				if (( index != -1 )) {
					this.fromConstraintSegments.spliceVoid(index, 1);
				}
				
			}
		}
		
		
		public virtual global::hxDaedalus.data.Vertex set_originVertex(global::hxDaedalus.data.Vertex @value) {
			this._originVertex = @value;
			return @value;
		}
		
		
		public virtual global::hxDaedalus.data.Edge set_nextLeftEdge(global::hxDaedalus.data.Edge @value) {
			this._nextLeftEdge = @value;
			return @value;
		}
		
		
		public virtual global::hxDaedalus.data.Face set_leftFace(global::hxDaedalus.data.Face @value) {
			this._leftFace = @value;
			return @value;
		}
		
		
		public virtual bool set_isConstrained(bool @value) {
			this._isConstrained = @value;
			return @value;
		}
		
		
		public virtual void dispose() {
			this._originVertex = null;
			this._oppositeEdge = null;
			this._nextLeftEdge = null;
			this._leftFace = null;
			this.fromConstraintSegments = null;
		}
		
		
		public virtual global::hxDaedalus.data.Vertex get_originVertex() {
			return this._originVertex;
		}
		
		
		public virtual global::hxDaedalus.data.Vertex get_destinationVertex() {
			return this.get_oppositeEdge().get_originVertex();
		}
		
		
		public virtual global::hxDaedalus.data.Edge get_oppositeEdge() {
			return this._oppositeEdge;
		}
		
		
		public virtual global::hxDaedalus.data.Edge get_nextLeftEdge() {
			return this._nextLeftEdge;
		}
		
		
		public virtual global::hxDaedalus.data.Edge get_prevLeftEdge() {
			return this._nextLeftEdge.get_nextLeftEdge();
		}
		
		
		public virtual global::hxDaedalus.data.Edge get_nextRightEdge() {
			return this._oppositeEdge.get_nextLeftEdge().get_nextLeftEdge().get_oppositeEdge();
		}
		
		
		public virtual global::hxDaedalus.data.Edge get_prevRightEdge() {
			return this._oppositeEdge.get_nextLeftEdge().get_oppositeEdge();
		}
		
		
		public virtual global::hxDaedalus.data.Edge get_rotLeftEdge() {
			return this._nextLeftEdge.get_nextLeftEdge().get_oppositeEdge();
		}
		
		
		public virtual global::hxDaedalus.data.Edge get_rotRightEdge() {
			return this._oppositeEdge.get_nextLeftEdge();
		}
		
		
		public virtual global::hxDaedalus.data.Face get_leftFace() {
			return this._leftFace;
		}
		
		
		public virtual global::hxDaedalus.data.Face get_rightFace() {
			return this._oppositeEdge.get_leftFace();
		}
		
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("edge ", global::haxe.lang.Runtime.toString(this.get_originVertex().get_id())), " - "), global::haxe.lang.Runtime.toString(this.get_destinationVertex().get_id()));
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2072734192:
					{
						this.colorDebug = ((int) (@value) );
						return @value;
					}
					
					
					case 4747770:
					{
						this._id = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2072734192:
					{
						this.colorDebug = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 306638755:
					{
						this._leftFace = ((global::hxDaedalus.data.Face) (@value) );
						return @value;
					}
					
					
					case 1450674902:
					{
						this._nextLeftEdge = ((global::hxDaedalus.data.Edge) (@value) );
						return @value;
					}
					
					
					case 1404854179:
					{
						this._oppositeEdge = ((global::hxDaedalus.data.Edge) (@value) );
						return @value;
					}
					
					
					case 787311817:
					{
						this._originVertex = ((global::hxDaedalus.data.Vertex) (@value) );
						return @value;
					}
					
					
					case 1596622029:
					{
						this._isConstrained = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1468342791:
					{
						this._isReal = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 4747770:
					{
						this._id = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1704213223:
					{
						this.fromConstraintSegments = ((global::HxArray<object>) (global::HxArray<object>.__hx_cast<object>(((global::HxArray) (@value) ))) );
						return @value;
					}
					
					
					case 1253111876:
					{
						this.set_leftFace(((global::hxDaedalus.data.Face) (@value) ));
						return @value;
					}
					
					
					case 1946744823:
					{
						this.set_nextLeftEdge(((global::hxDaedalus.data.Edge) (@value) ));
						return @value;
					}
					
					
					case 1283381738:
					{
						this.set_originVertex(((global::hxDaedalus.data.Vertex) (@value) ));
						return @value;
					}
					
					
					case 551064716:
					{
						this.set_isConstrained(global::haxe.lang.Runtime.toBool(@value));
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 1876942448:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_rightFace", 1876942448)) );
					}
					
					
					case 2143988813:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_leftFace", 2143988813)) );
					}
					
					
					case 498372011:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_rotRightEdge", 498372011)) );
					}
					
					
					case 1029099698:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_rotLeftEdge", 1029099698)) );
					}
					
					
					case 463557661:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_prevRightEdge", 463557661)) );
					}
					
					
					case 1230294557:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_nextRightEdge", 1230294557)) );
					}
					
					
					case 1741561472:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_prevLeftEdge", 1741561472)) );
					}
					
					
					case 2024268928:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_nextLeftEdge", 2024268928)) );
					}
					
					
					case 1978448205:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_oppositeEdge", 1978448205)) );
					}
					
					
					case 934361961:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_destinationVertex", 934361961)) );
					}
					
					
					case 1360905843:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_originVertex", 1360905843)) );
					}
					
					
					case 994869407:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "dispose", 994869407)) );
					}
					
					
					case 1253472239:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_isConstrained", 1253472239)) );
					}
					
					
					case 348377025:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_leftFace", 348377025)) );
					}
					
					
					case 1323946484:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_nextLeftEdge", 1323946484)) );
					}
					
					
					case 660583399:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_originVertex", 660583399)) );
					}
					
					
					case 1059759400:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "removeFromConstraintSegment", 1059759400)) );
					}
					
					
					case 1813079083:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addFromConstraintSegment", 1813079083)) );
					}
					
					
					case 1656518663:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setDatas", 1656518663)) );
					}
					
					
					case 659070947:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_isConstrained", 659070947)) );
					}
					
					
					case 1502969905:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_isReal", 1502969905)) );
					}
					
					
					case 590344996:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_id", 590344996)) );
					}
					
					
					case 2072734192:
					{
						return this.colorDebug;
					}
					
					
					case 306638755:
					{
						return this._leftFace;
					}
					
					
					case 1450674902:
					{
						return this._nextLeftEdge;
					}
					
					
					case 1404854179:
					{
						return this._oppositeEdge;
					}
					
					
					case 787311817:
					{
						return this._originVertex;
					}
					
					
					case 1596622029:
					{
						return this._isConstrained;
					}
					
					
					case 1468342791:
					{
						return this._isReal;
					}
					
					
					case 4747770:
					{
						return this._id;
					}
					
					
					case 779881113:
					{
						return this.get_rightFace();
					}
					
					
					case 420847906:
					{
						return this.get_rotRightEdge();
					}
					
					
					case 2088048923:
					{
						return this.get_rotLeftEdge();
					}
					
					
					case 355551430:
					{
						return this.get_prevRightEdge();
					}
					
					
					case 1122288326:
					{
						return this.get_nextRightEdge();
					}
					
					
					case 1664037367:
					{
						return this.get_prevLeftEdge();
					}
					
					
					case 1900924100:
					{
						return this.get_oppositeEdge();
					}
					
					
					case 956512402:
					{
						return this.get_destinationVertex();
					}
					
					
					case 1704213223:
					{
						return this.fromConstraintSegments;
					}
					
					
					case 1253111876:
					{
						return this.get_leftFace();
					}
					
					
					case 1946744823:
					{
						return this.get_nextLeftEdge();
					}
					
					
					case 1283381738:
					{
						return this.get_originVertex();
					}
					
					
					case 551064716:
					{
						return this.get_isConstrained();
					}
					
					
					case 1762529384:
					{
						return this.get_isReal();
					}
					
					
					case 23515:
					{
						return this.get_id();
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2072734192:
					{
						return ((double) (this.colorDebug) );
					}
					
					
					case 4747770:
					{
						return ((double) (this._id) );
					}
					
					
					case 23515:
					{
						return ((double) (this.get_id()) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 1876942448:
					{
						return this.get_rightFace();
					}
					
					
					case 2143988813:
					{
						return this.get_leftFace();
					}
					
					
					case 498372011:
					{
						return this.get_rotRightEdge();
					}
					
					
					case 1029099698:
					{
						return this.get_rotLeftEdge();
					}
					
					
					case 463557661:
					{
						return this.get_prevRightEdge();
					}
					
					
					case 1230294557:
					{
						return this.get_nextRightEdge();
					}
					
					
					case 1741561472:
					{
						return this.get_prevLeftEdge();
					}
					
					
					case 2024268928:
					{
						return this.get_nextLeftEdge();
					}
					
					
					case 1978448205:
					{
						return this.get_oppositeEdge();
					}
					
					
					case 934361961:
					{
						return this.get_destinationVertex();
					}
					
					
					case 1360905843:
					{
						return this.get_originVertex();
					}
					
					
					case 994869407:
					{
						this.dispose();
						break;
					}
					
					
					case 1253472239:
					{
						return this.set_isConstrained(global::haxe.lang.Runtime.toBool(dynargs[0]));
					}
					
					
					case 348377025:
					{
						return this.set_leftFace(((global::hxDaedalus.data.Face) (dynargs[0]) ));
					}
					
					
					case 1323946484:
					{
						return this.set_nextLeftEdge(((global::hxDaedalus.data.Edge) (dynargs[0]) ));
					}
					
					
					case 660583399:
					{
						return this.set_originVertex(((global::hxDaedalus.data.Vertex) (dynargs[0]) ));
					}
					
					
					case 1059759400:
					{
						this.removeFromConstraintSegment(((global::hxDaedalus.data.ConstraintSegment) (dynargs[0]) ));
						break;
					}
					
					
					case 1813079083:
					{
						this.addFromConstraintSegment(((global::hxDaedalus.data.ConstraintSegment) (dynargs[0]) ));
						break;
					}
					
					
					case 1656518663:
					{
						this.setDatas(((global::hxDaedalus.data.Vertex) (dynargs[0]) ), ((global::hxDaedalus.data.Edge) (dynargs[1]) ), ((global::hxDaedalus.data.Edge) (dynargs[2]) ), ((global::hxDaedalus.data.Face) (dynargs[3]) ), global::haxe.lang.Null<object>.ofDynamic<bool>(( (( dynargs.Length > 4 )) ? (dynargs[4]) : (null) )), global::haxe.lang.Null<object>.ofDynamic<bool>(( (( dynargs.Length > 5 )) ? (dynargs[5]) : (null) )));
						break;
					}
					
					
					case 659070947:
					{
						return this.get_isConstrained();
					}
					
					
					case 1502969905:
					{
						return this.get_isReal();
					}
					
					
					case 590344996:
					{
						return this.get_id();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::HxArray<string> baseArr) {
			baseArr.push("colorDebug");
			baseArr.push("_leftFace");
			baseArr.push("_nextLeftEdge");
			baseArr.push("_oppositeEdge");
			baseArr.push("_originVertex");
			baseArr.push("_isConstrained");
			baseArr.push("_isReal");
			baseArr.push("_id");
			baseArr.push("rightFace");
			baseArr.push("rotRightEdge");
			baseArr.push("rotLeftEdge");
			baseArr.push("prevRightEdge");
			baseArr.push("nextRightEdge");
			baseArr.push("prevLeftEdge");
			baseArr.push("oppositeEdge");
			baseArr.push("destinationVertex");
			baseArr.push("fromConstraintSegments");
			baseArr.push("leftFace");
			baseArr.push("nextLeftEdge");
			baseArr.push("originVertex");
			baseArr.push("isConstrained");
			baseArr.push("isReal");
			baseArr.push("id");
			base.__hx_getFields(baseArr);
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


