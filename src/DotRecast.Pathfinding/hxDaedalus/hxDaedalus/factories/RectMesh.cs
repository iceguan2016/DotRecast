// Generated by Haxe 4.3.6

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxDaedalus.factories {
	public class RectMesh : global::haxe.lang.HxObject {
		
		public RectMesh(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public RectMesh() {
			global::hxDaedalus.factories.RectMesh.__hx_ctor_hxDaedalus_factories_RectMesh(this);
		}
		
		
		protected static void __hx_ctor_hxDaedalus_factories_RectMesh(global::hxDaedalus.factories.RectMesh __hx_this) {
		}
		
		
		public static global::hxDaedalus.data.Mesh buildRectangle(double width, double height) {
			global::hxDaedalus.data.Vertex vTL = new global::hxDaedalus.data.Vertex();
			global::hxDaedalus.data.Vertex vTR = new global::hxDaedalus.data.Vertex();
			global::hxDaedalus.data.Vertex vBR = new global::hxDaedalus.data.Vertex();
			global::hxDaedalus.data.Vertex vBL = new global::hxDaedalus.data.Vertex();
			global::hxDaedalus.data.Edge eTL_TR = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Edge eTR_TL = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Edge eTR_BR = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Edge eBR_TR = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Edge eBR_BL = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Edge eBL_BR = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Edge eBL_TL = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Edge eTL_BL = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Edge eTR_BL = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Edge eBL_TR = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Edge eTL_BR = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Edge eBR_TL = new global::hxDaedalus.data.Edge();
			global::hxDaedalus.data.Face fTL_BL_TR = new global::hxDaedalus.data.Face();
			global::hxDaedalus.data.Face fTR_BL_BR = new global::hxDaedalus.data.Face();
			global::hxDaedalus.data.Face fTL_BR_BL = new global::hxDaedalus.data.Face();
			global::hxDaedalus.data.Face fTL_TR_BR = new global::hxDaedalus.data.Face();
			global::hxDaedalus.data.ConstraintShape boundShape = new global::hxDaedalus.data.ConstraintShape();
			global::hxDaedalus.data.ConstraintSegment segTop = new global::hxDaedalus.data.ConstraintSegment();
			global::hxDaedalus.data.ConstraintSegment segRight = new global::hxDaedalus.data.ConstraintSegment();
			global::hxDaedalus.data.ConstraintSegment segBot = new global::hxDaedalus.data.ConstraintSegment();
			global::hxDaedalus.data.ConstraintSegment segLeft = new global::hxDaedalus.data.ConstraintSegment();
			global::hxDaedalus.data.Mesh mesh = new global::hxDaedalus.data.Mesh(((double) (width) ), ((double) (height) ));
			double offset = 10.0;
			vTL.get_pos().setXY(( 0 - offset ), ( 0 - offset ));
			vTR.get_pos().setXY(( width + offset ), ( 0 - offset ));
			vBR.get_pos().setXY(( width + offset ), ( height + offset ));
			vBL.get_pos().setXY(( 0 - offset ), ( height + offset ));
			vTL.setDatas(eTL_TR, default(global::haxe.lang.Null<bool>));
			vTR.setDatas(eTR_BR, default(global::haxe.lang.Null<bool>));
			vBR.setDatas(eBR_BL, default(global::haxe.lang.Null<bool>));
			vBL.setDatas(eBL_TL, default(global::haxe.lang.Null<bool>));
			eTL_TR.setDatas(vTL, eTR_TL, eTR_BR, fTL_TR_BR, new global::haxe.lang.Null<bool>(true, true), new global::haxe.lang.Null<bool>(true, true));
			eTR_TL.setDatas(vTR, eTL_TR, eTL_BL, fTL_BL_TR, new global::haxe.lang.Null<bool>(true, true), new global::haxe.lang.Null<bool>(true, true));
			eTR_BR.setDatas(vTR, eBR_TR, eBR_TL, fTL_TR_BR, new global::haxe.lang.Null<bool>(true, true), new global::haxe.lang.Null<bool>(true, true));
			eBR_TR.setDatas(vBR, eTR_BR, eTR_BL, fTR_BL_BR, new global::haxe.lang.Null<bool>(true, true), new global::haxe.lang.Null<bool>(true, true));
			eBR_BL.setDatas(vBR, eBL_BR, eBL_TL, fTL_BR_BL, new global::haxe.lang.Null<bool>(true, true), new global::haxe.lang.Null<bool>(true, true));
			eBL_BR.setDatas(vBL, eBR_BL, eBR_TR, fTR_BL_BR, new global::haxe.lang.Null<bool>(true, true), new global::haxe.lang.Null<bool>(true, true));
			eBL_TL.setDatas(vBL, eTL_BL, eTL_BR, fTL_BR_BL, new global::haxe.lang.Null<bool>(true, true), new global::haxe.lang.Null<bool>(true, true));
			eTL_BL.setDatas(vTL, eBL_TL, eBL_TR, fTL_BL_TR, new global::haxe.lang.Null<bool>(true, true), new global::haxe.lang.Null<bool>(true, true));
			eTR_BL.setDatas(vTR, eBL_TR, eBL_BR, fTR_BL_BR, new global::haxe.lang.Null<bool>(true, true), new global::haxe.lang.Null<bool>(false, true));
			eBL_TR.setDatas(vBL, eTR_BL, eTR_TL, fTL_BL_TR, new global::haxe.lang.Null<bool>(true, true), new global::haxe.lang.Null<bool>(false, true));
			eTL_BR.setDatas(vTL, eBR_TL, eBR_BL, fTL_BR_BL, new global::haxe.lang.Null<bool>(false, true), new global::haxe.lang.Null<bool>(false, true));
			eBR_TL.setDatas(vBR, eTL_BR, eTL_TR, fTL_TR_BR, new global::haxe.lang.Null<bool>(false, true), new global::haxe.lang.Null<bool>(false, true));
			fTL_BL_TR.setDatas(eBL_TR, default(global::haxe.lang.Null<bool>));
			fTR_BL_BR.setDatas(eTR_BL, default(global::haxe.lang.Null<bool>));
			fTL_BR_BL.setDatas(eBR_BL, new global::haxe.lang.Null<bool>(false, true));
			fTL_TR_BR.setDatas(eTR_BR, new global::haxe.lang.Null<bool>(false, true));
			vTL.set_fromConstraintSegments(new global::HxArray<object>(new object[]{segTop, segLeft}));
			vTR.set_fromConstraintSegments(new global::HxArray<object>(new object[]{segTop, segRight}));
			vBR.set_fromConstraintSegments(new global::HxArray<object>(new object[]{segRight, segBot}));
			vBL.set_fromConstraintSegments(new global::HxArray<object>(new object[]{segBot, segLeft}));
			eTL_TR.fromConstraintSegments.push(segTop);
			eTR_TL.fromConstraintSegments.push(segTop);
			eTR_BR.fromConstraintSegments.push(segRight);
			eBR_TR.fromConstraintSegments.push(segRight);
			eBR_BL.fromConstraintSegments.push(segBot);
			eBL_BR.fromConstraintSegments.push(segBot);
			eBL_TL.fromConstraintSegments.push(segLeft);
			eTL_BL.fromConstraintSegments.push(segLeft);
			segTop.get_edges().push(eTL_TR);
			segRight.get_edges().push(eTR_BR);
			segBot.get_edges().push(eBR_BL);
			segLeft.get_edges().push(eBL_TL);
			segTop.fromShape = boundShape;
			segRight.fromShape = boundShape;
			segBot.fromShape = boundShape;
			segLeft.fromShape = boundShape;
			{
				{
					global::hxDaedalus.data.ConstraintSegment f = segTop;
					boundShape.segments.push(f);
				}
				
				{
					global::hxDaedalus.data.ConstraintSegment f1 = segRight;
					boundShape.segments.push(f1);
				}
				
				{
					global::hxDaedalus.data.ConstraintSegment f2 = segBot;
					boundShape.segments.push(f2);
				}
				
				{
					global::hxDaedalus.data.ConstraintSegment f3 = segLeft;
					boundShape.segments.push(f3);
				}
				
			}
			
			{
				{
					global::hxDaedalus.data.Vertex f4 = vTL;
					mesh._vertices.push(f4);
				}
				
				{
					global::hxDaedalus.data.Vertex f5 = vTR;
					mesh._vertices.push(f5);
				}
				
				{
					global::hxDaedalus.data.Vertex f6 = vBR;
					mesh._vertices.push(f6);
				}
				
				{
					global::hxDaedalus.data.Vertex f7 = vBL;
					mesh._vertices.push(f7);
				}
				
			}
			
			{
				{
					global::hxDaedalus.data.Edge f8 = eTL_TR;
					mesh._edges.push(f8);
				}
				
				{
					global::hxDaedalus.data.Edge f9 = eTR_TL;
					mesh._edges.push(f9);
				}
				
				{
					global::hxDaedalus.data.Edge f10 = eTR_BR;
					mesh._edges.push(f10);
				}
				
				{
					global::hxDaedalus.data.Edge f11 = eBR_TR;
					mesh._edges.push(f11);
				}
				
				{
					global::hxDaedalus.data.Edge f12 = eBR_BL;
					mesh._edges.push(f12);
				}
				
				{
					global::hxDaedalus.data.Edge f13 = eBL_BR;
					mesh._edges.push(f13);
				}
				
				{
					global::hxDaedalus.data.Edge f14 = eBL_TL;
					mesh._edges.push(f14);
				}
				
				{
					global::hxDaedalus.data.Edge f15 = eTL_BL;
					mesh._edges.push(f15);
				}
				
				{
					global::hxDaedalus.data.Edge f16 = eTR_BL;
					mesh._edges.push(f16);
				}
				
				{
					global::hxDaedalus.data.Edge f17 = eBL_TR;
					mesh._edges.push(f17);
				}
				
				{
					global::hxDaedalus.data.Edge f18 = eTL_BR;
					mesh._edges.push(f18);
				}
				
				{
					global::hxDaedalus.data.Edge f19 = eBR_TL;
					mesh._edges.push(f19);
				}
				
			}
			
			{
				{
					global::hxDaedalus.data.Face f20 = fTL_BL_TR;
					mesh._faces.push(f20);
				}
				
				{
					global::hxDaedalus.data.Face f21 = fTR_BL_BR;
					mesh._faces.push(f21);
				}
				
				{
					global::hxDaedalus.data.Face f22 = fTL_BR_BL;
					mesh._faces.push(f22);
				}
				
				{
					global::hxDaedalus.data.Face f23 = fTL_TR_BR;
					mesh._faces.push(f23);
				}
				
			}
			
			mesh.get___constraintShapes().push(boundShape);
			global::HxArray<double> securityRect = new global::HxArray<double>();
			{
				{
					double f24 = ((double) (0) );
					securityRect.push(f24);
				}
				
				{
					double f25 = ((double) (0) );
					securityRect.push(f25);
				}
				
				{
					double f26 = width;
					securityRect.push(f26);
				}
				
				{
					double f27 = ((double) (0) );
					securityRect.push(f27);
				}
				
			}
			
			{
				{
					double f28 = width;
					securityRect.push(f28);
				}
				
				{
					double f29 = ((double) (0) );
					securityRect.push(f29);
				}
				
				{
					double f30 = width;
					securityRect.push(f30);
				}
				
				{
					double f31 = height;
					securityRect.push(f31);
				}
				
			}
			
			{
				{
					double f32 = width;
					securityRect.push(f32);
				}
				
				{
					double f33 = height;
					securityRect.push(f33);
				}
				
				{
					double f34 = ((double) (0) );
					securityRect.push(f34);
				}
				
				{
					double f35 = height;
					securityRect.push(f35);
				}
				
			}
			
			{
				{
					double f36 = ((double) (0) );
					securityRect.push(f36);
				}
				
				{
					double f37 = height;
					securityRect.push(f37);
				}
				
				{
					double f38 = ((double) (0) );
					securityRect.push(f38);
				}
				
				{
					double f39 = ((double) (0) );
					securityRect.push(f39);
				}
				
			}
			
			mesh.set_clipping(false);
			mesh.insertConstraintShape(securityRect);
			mesh.set_clipping(true);
			return mesh;
		}
		
		
	}
}


